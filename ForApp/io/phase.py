# This an autogenerated file
# A phase belonging to an Operation
# Generated with Phase
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.phase import PhaseBlueprint
from typing import Dict,Sequence,List
from ForApp.io.simulationconfig import SimulationConfig
from ForApp.io.variable import Variable

class Phase(Entity):
    """
    A phase belonging to an Operation
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    simulationConfigs : List[SimulationConfig] 
         
    start : str 
         (default "")
    workflowTask : str 
         (default "")
    end : str 
         (default "")
    status : str 
         (default 'Upcoming')
    defaultVariables : List[Variable] 
         
    """

    def __init__(self , name:str="", description:str="",
        simulationConfigs:List[SimulationConfig]=None, start:str="",
        workflowTask:str="", end:str="", status:str='Upcoming',
        defaultVariables:List[Variable]=None, **kwargs):
        self.__name = name
        self.__description = description
        self.__simulationConfigs = list() if simulationConfigs is None else simulationConfigs
        self.__start = start
        self.__workflowTask = workflowTask
        self.__end = end
        self.__status = status
        self.__defaultVariables = list() if defaultVariables is None else defaultVariables
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return PhaseBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def simulationConfigs(self) -> List[SimulationConfig]:
        """"""
        return self.__simulationConfigs

    @simulationConfigs.setter
    def simulationConfigs(self, value: List[SimulationConfig]):
        """Set simulationConfigs"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__simulationConfigs = value

    @property
    def start(self) -> str:
        """"""
        return self.__start

    @start.setter
    def start(self, value: str):
        """Set start"""
        self.__start = str(value)

    @property
    def workflowTask(self) -> str:
        """"""
        return self.__workflowTask

    @workflowTask.setter
    def workflowTask(self, value: str):
        """Set workflowTask"""
        self.__workflowTask = str(value)

    @property
    def end(self) -> str:
        """"""
        return self.__end

    @end.setter
    def end(self, value: str):
        """Set end"""
        self.__end = str(value)

    @property
    def status(self) -> str:
        """"""
        return self.__status

    @status.setter
    def status(self, value: str):
        """Set status"""
        self.__status = str(value)

    @property
    def defaultVariables(self) -> List[Variable]:
        """"""
        return self.__defaultVariables

    @defaultVariables.setter
    def defaultVariables(self, value: List[Variable]):
        """Set defaultVariables"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__defaultVariables = value
