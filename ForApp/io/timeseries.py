# This an autogenerated file
# Storage for a single response time series e.g. Significant wave height vs time
# Generated with Timeseries
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.timeseries import TimeseriesBlueprint
from typing import Dict, Optional,Sequence,List
from ForApp.io.threshold import Threshold
from ForApp.io.plottypes import PlotTypes

class Timeseries(Entity):
    """
    Storage for a single response time series e.g. Significant wave height vs time
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    datetimes : Sequence[str] 
         datetimes from Unix epoch \n(Jan 1st 1970 at 00:00:00 UTC)
    values : Sequence[float] 
         The value array corresponding to the datetimes
    unit : str 
         The unit of the values(default "")
    threshold : Threshold 
         Optional threshold
    plotType : PlotTypes 
         
    """

    def __init__(
        self , name:str="", description:str="", 
        datetimes:list[str]=None, values:list[float]=None,
        unit:str="", plotType:PlotTypes=PlotTypes.line, **kwargs):
        self.__name = name
        self.__description = description
        self.__datetimes = list() if datetimes is None else datetimes
        self.__values = list() if values is None else values
        self.__unit = unit
        self.__threshold = None
        self.__plotType = plotType
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return TimeseriesBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def datetimes(self) -> Sequence[str]:
        """datetimes from Unix epoch 
(Jan 1st 1970 at 00:00:00 UTC)"""
        return self.__datetimes

    @datetimes.setter
    def datetimes(self, value: Sequence[str]):
        """Set datetimes"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__datetimes = value

    @property
    def values(self) -> Sequence[float]:
        """The value array corresponding to the datetimes"""
        return self.__values

    @values.setter
    def values(self, value: Sequence[float]):
        """Set values"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__values = value

    @property
    def unit(self) -> str:
        """The unit of the values"""
        return self.__unit

    @unit.setter
    def unit(self, value: str):
        """Set unit"""
        self.__unit = str(value)

    @property
    def threshold(self) -> Threshold:
        """Optional threshold"""
        return self.__threshold

    @threshold.setter
    def threshold(self, value: Threshold):
        """Set threshold"""
        self.__threshold = value

    @property
    def plotType(self) -> PlotTypes:
        """"""
        return self.__plotType

    @plotType.setter
    def plotType(self, value: PlotTypes):
        """Set plotType"""
        self.__plotType = value
