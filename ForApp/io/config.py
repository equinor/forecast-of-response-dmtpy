# This an autogenerated file
# Configuration for operations
# Generated with Config
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.config import ConfigBlueprint
from typing import Dict,Sequence,List
from ForApp.io.phase import Phase

class Config(Entity):
    """
    Configuration for operations
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    simaVersion : str 
         (default "")
    phases : List[Phase] 
         
    """

    def __init__(self , name:str="", description:str="", simaVersion:str="",
        phases:list[Phase]=None, **kwargs):
        self.__name = name
        self.__description = description
        self.__simaVersion = simaVersion
        self.__phases = list() if phases is None else phases
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ConfigBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def simaVersion(self) -> str:
        """"""
        return self.__simaVersion

    @simaVersion.setter
    def simaVersion(self, value: str):
        """Set simaVersion"""
        self.__simaVersion = str(value)

    @property
    def phases(self) -> List[Phase]:
        """"""
        return self.__phases

    @phases.setter
    def phases(self, value: List[Phase]):
        """Set phases"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__phases = value
