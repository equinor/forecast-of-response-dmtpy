# This an autogenerated file
# 
# Generated with SimulationConfig
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.simulationconfig import SimulationConfigBlueprint
from typing import Dict,Sequence,List
from ForApp.io.variable import Variable
from ForApp.io.simulation import Simulation

class SimulationConfig(Entity):
    """
    
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    variables : List[Variable] 
         
    simulations : List[Simulation] 
         
    published : bool 
         (default False)
    """

    def __init__(
        self , name:str="", description:str="", 
        variables:List[Variable]=None, simulations:List[Simulation]=None,
        published:bool=False, **kwargs):
        self.__name = name
        self.__description = description
        self.__variables = list() if variables is None else variables
        self.__simulations = list() if simulations is None else simulations
        self.__published = published
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return SimulationConfigBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def variables(self) -> List[Variable]:
        """"""
        return self.__variables

    @variables.setter
    def variables(self, value: List[Variable]):
        """Set variables"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__variables = value

    @property
    def simulations(self) -> List[Simulation]:
        """"""
        return self.__simulations

    @simulations.setter
    def simulations(self, value: List[Simulation]):
        """Set simulations"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__simulations = value

    @property
    def published(self) -> bool:
        """"""
        return self.__published

    @published.setter
    def published(self, value: bool):
        """Set published"""
        self.__published = bool(value)
