# This an autogenerated file
# Results from a simulation corresponding to a set of key:value variables (no variations)
# Generated with VariableRun
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.variablerun import VariableRunBlueprint
from typing import Dict,Sequence,List,Optional, Union
from ForApp.io.response import Response
from ForApp.io.variable import Variable

class VariableRun(Entity):
    """
    Results from a simulation corresponding to a set of key:value variables (no variations)
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    responses : List[Response] 
         a list of responses, where each response can have a number of timeseries which relate to its statistics e.g. mean response, max response etc...
    variables : List[Variable] 
         
    """

    def __init__(
        self , name:str="", description:str="", 
        response: List[Response]=None, variables: List[Variable]=None,
        **kwargs):
        self.__name = name
        self.__description = description
        self.__responses = list() if response is None else response
        self.__variables = list() if variables is None else variables
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return VariableRunBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def responses(self) -> List[Response]:
        """a list of responses, where each response can have a number of timeseries which relate to its statistics e.g. mean response, max response etc..."""
        return self.__responses

    @responses.setter
    def responses(self, value: List[Response]):
        """Set responses"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__responses = value

    @property
    def variables(self) -> List[Variable]:
        """"""
        return self.__variables

    @variables.setter
    def variables(self, value: List[Variable]):
        """Set variables"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__variables = value


    def get_variable(self, variable_name:str) -> Union[str,float,int,bool]:
        """Returns the value of the variable

        Args:
            variable_name (str): Name of variable (variable.name)

        Returns:
            Union[str,float,int,bool]: Value of named value
        """
        for variable in self.variables:
            if variable.name == variable_name: 
                return variable.value
        error_message = f"Variable: {variable_name} not found"
        error_message += "\nAvailable variables: " + ", ".join([variable.name for variable in self.variables])        
        raise(error_message)    


    def get(self, response_name:str, statistic_name:str) -> Union[List[float],List[str],List[bool],List[int]]:
        """Returns the timeseries values of the response statistic

        Args:
            response_name (str): Name of response
            statistic_name (str): Name of statistic

        Returns:
            Union[List[float],List[str],List[bool],List[int]]: Values of the response statistic
        """
        for response in self.responses:
            if response.name == response_name:
                for statistic in response.statistics:
                    if statistic.name == statistic_name:
                        return statistic.values
        error_message = f"Response: {response_name}, Stastistic: {statistic_name} not found"
        error_message += "\nAvailable response: " + ", ".join([response.name for response in self.responses])        
        raise(error_message)    
    
