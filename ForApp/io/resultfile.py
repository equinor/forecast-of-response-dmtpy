# This an autogenerated file
# 
# Generated with ResultFile
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.resultfile import ResultFileBlueprint
from typing import Dict,Sequence,List
from ForApp.io.variablerun import VariableRun
from ForApp.io.comparisongroups import ComparisonGroups

class ResultFile(Entity):
    """
    
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    variableRuns : List[VariableRun] 
         Results relating to a set of variables
    comparisonGroups : List[ComparisonGroups] 
         
    """

    def __init__(self , name:str="", description:str="", 
        variableRuns:list[VariableRun]=None, 
        comparisonGroups:list[ComparisonGroups]=None,**kwargs):
        self.__name = name
        self.__description = description
        self.__variableRuns = list() if variableRuns is None else variableRuns
        self.__comparisonGroups = list() if comparisonGroups is None else comparisonGroups
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ResultFileBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def variableRuns(self) -> List[VariableRun]:
        """Results relating to a set of variables"""
        return self.__variableRuns

    @variableRuns.setter
    def variableRuns(self, value: List[VariableRun]):
        """Set variableRuns"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__variableRuns = value

    @property
    def comparisonGroups(self) -> List[ComparisonGroups]:
        """"""
        return self.__comparisonGroups

    @comparisonGroups.setter
    def comparisonGroups(self, value: List[ComparisonGroups]):
        """Set comparisonGroups"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__comparisonGroups = value
