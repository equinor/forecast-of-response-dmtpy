# This an autogenerated file
# 
# Generated with Threshold
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.threshold import ThresholdBlueprint
from typing import Dict

class Threshold(Entity):
    """
    
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    max : float 
         (default 0.0)
    min : float 
         (default 0.0)
    unit : str 
         (default "")
    """

    def __init__(self , name:str="", description:str="", max:float=0.0, min:float=0.0, unit:str="", **kwargs):
        self.__name = name
        self.__description = description
        self.__max = max
        self.__min = min
        self.__unit = unit
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ThresholdBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def max(self) -> float:
        """"""
        return self.__max

    @max.setter
    def max(self, value: float):
        """Set max"""
        self.__max = float(value)

    @property
    def min(self) -> float:
        """"""
        return self.__min

    @min.setter
    def min(self, value: float):
        """Set min"""
        self.__min = float(value)

    @property
    def unit(self) -> str:
        """"""
        return self.__unit

    @unit.setter
    def unit(self, value: str):
        """Set unit"""
        self.__unit = str(value)
