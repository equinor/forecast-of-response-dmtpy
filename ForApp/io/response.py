# This an autogenerated file
# 
# Generated with Response
from dmt.entity import Entity
from dmt.blueprint import Blueprint
from .blueprints.response import ResponseBlueprint
from typing import Dict,Sequence,List
from ForApp.io.timeseries import Timeseries

class Response(Entity):
    """
    
    
    Keyword arguments
    -----------------
    name : str 
         (default "")
    description : str 
         (default "")
    statistics : List[Timeseries] 
         
    """

    def __init__(self , name:str="", description:str="",
        statistics:List[Timeseries]=None,
        **kwargs):
        self.__name = name
        self.__description = description
        self.__statistics = list() if statistics is None else statistics
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return ResponseBlueprint()


    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def statistics(self) -> List[Timeseries]:
        """"""
        return self.__statistics

    @statistics.setter
    def statistics(self, value: List[Timeseries]):
        """Set statistics"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__statistics = value
